#!/usr/bin/env bash

idtsub_prefix=~/.opt/idt
idtsub_data_path=$idtsub_prefix/share/idtsub
idtsub_tmpdir_base=/dev/shm/$UID.$USER
idtsub_system=slurm

function idtsub/is-function { declare -f "$1" &>/dev/null; }
function idtsub/function#try { if idtsub/is-function "$1"; then "$@"; else return 127; fi; }

function mkd { [[ -d $1 ]] || mkdir -p "$1"; }
function mkpd { [[ $1 == ?*/* ]] && mkd "${1%/*}"; }

function idtsub/string#seconds-to-human {
  local time=$1
  if ((time<3600)); then
    printf -v ret '%02dm%02ds' "$((time/60%60))" "$((time%60))"
  elif ((time<360000)); then
    printf -v ret '%02dh%02dm' "$((time/3600))" "$((time/60%60))"
  else
    printf -v ret '%02dd%02dh' "$((time/3600/24))" "$((time/3600%24))"
  fi
}
function quote-words {
  local word out= q=\' Q="'\''" specialchars=$IFS$'|&;()[]{}<>\\`$?*~!^#'$q\"
  for word; do
    if [[ $word == *$'\n'* ]]; then
      printf -v word %q "$word"
    elif [[ $word == *["$specialchars"]* ]]; then
      word=$q${word//$q/$Q}$q
    fi
    out=${out:+$out' '}$word
  done
  ret=$out
}

function idtsub/readargs {
  local cmdname=$1; shift
  local opt= has_optarg= optarg=
  local iarg=0 args
  args=("$@")
  while ((iarg<$#)); do
    local arg=${args[iarg++]}
    if [[ $flags != - && $arg == -?* ]]; then
      case $arg in
      (--) flags=-$flags ;;
      (--*)
        opt=${arg:2} optarg= has_optarg=
        [[ $opt == *=* ]] &&
          has_optarg=1 optarg=${opt#*=} opt=${opt%%=*}
        idtsub/function#try "idtsub/readargs:$cmdname/option:$opt"
        (($?==127)) && idtsub/readargs/argerr "unrecognized option '$arg'." ;;
      (-*)
        local ic=1
        while ((ic<${#arg})); do
          opt=${arg:ic:1}; ((ic++))
          optarg=${arg:ic} has_optarg=${optarg:+1}
          idtsub/function#try "idtsub/readargs:$cmdname/option:$opt"
          if (($?==127)); then
            idtsub/readargs/argerr "unrecognized option '-$opt'."
            continue
          fi
          [[ $has_optarg == used ]] && break
        done ;;
      esac
    else
      idtsub/function#try "idtsub/readargs:$cmdname/process-argument"
      (($?==127)) && idtsub/readargs/argerr "unrecognized argument '$arg'"
    fi
  done
  [[ $flags != *E* ]]
}
## @fn idtsub/readargs/argerr message
##   @param[in] message
##   @var[in] cmdname iarg
##   @var[in,out] flags
function idtsub/readargs/argerr {
  echo "idtsub/$cmdname:\$$iarg: $1" >&2
  flags=E$flags
}
## @fn idtsub/readargs/get-optarg opts
##   @var[in] cmdname iarg args opt has_optarg
##   @var[in,out] optarg flags
function idtsub/readargs/get-optarg {
  local getoptarg_opts=$1
  if [[ $has_optarg ]]; then
    has_optarg=used
  else
    if ((iarg>=${#args[@]})); then
      local o=-$opt; ((${#opt}>1)) && o=-$o
      idtsub/readargs/argerr "missing option argument for '$o'."
      return 1
    fi
    optarg=${args[iarg++]}
  fi

  if [[ :$getoptarg_opts: == *:unsigned:* ]]; then
    if [[ ! $optarg || ${optarg//[0-9]} ]]; then
       local o=-$opt; ((${#opt}>1)) && o=-$o
       idtsub/readargs/argerr "unsigned integer is required as an optarg of '$o'."
       return 1
    fi
  fi
}

## @fn idtsub/readargs/define-longname cmdname opt longname
function idtsub/readargs/define-longname {
  local cmdname=$1 c=${2%%:*} longname=${2#*:}
  [[ $2 == *:* && $longname ]] &&
    eval "function idtsub/readargs:$cmdname/option:$longname { idtsub/readargs:submit/option:$c; }"
}

## @fn idtsub/readargs/define-flag-option cmdname opt [longname]
function idtsub/readargs/define-flag-option {
  local cmdname=$1 c=${2%%:*} flag=${3:-${2::1}}
  eval "function idtsub/readargs:$cmdname/option:$c { flags=$flag\$flags; }"
  idtsub/readargs/define-longname "$@"
}
## @fn idtsub/readargs/define-string-option cmdname opt[:longname] var [opts]
function idtsub/readargs/define-scalar-option {
  local cmdname=$1 c=${2%%:*} var=$3 opts=$4
  eval "function idtsub/readargs:$cmdname/option:$c { idtsub/readargs/get-optarg '$opts' && $var=\$optarg; }"
  idtsub/readargs/define-longname "$@"
}
## @fn idtsub/readargs/define-array-option cmdname opt[:longname] arr [opts]
function idtsub/readargs/define-array-option {
  local cmdname=$1 c=${2%%:*} arr=$3 opts=$4
  eval "function idtsub/readargs:$cmdname/option:$c { idtsub/readargs/get-optarg '$opts' && $arr+=(\"\$optarg\"); }"
  idtsub/readargs/define-longname "$@"
}

#-----------------------------------------------------------------------------

idtsub/readargs/define-scalar-option system-submit D:chdir  chdir
idtsub/readargs/define-scalar-option system-submit n:ntasks ntask unsigned
idtsub/readargs/define-scalar-option system-submit J:job-name job_name
function idtsub/readargs:system-submit/process-argument {
  if [[ $script ]]; then
    idtsub/readargs/argerr "redundant argument '$arg'." >&2
    return 1
  fi
  if [[ ! $arg ]]; then
    idtsub/readargs/argerr "invalid argument '$arg'." >&2
    return 1
  fi
  script=$arg
}

## @fn idtsub/system/submit.readargs [-wnJ OPTARG] SCRIPT
##   @var[out] floags chdir ntask job_name script
function idtsub/system/submit.readargs {
  flags= chdir=$PWD ntask=1 job_name=unnamed script=
  idtsub/readargs system-submit "$@"
  if [[ ! $script ]]; then
    echo "idtsub submit: script is not specified." >&2
    flags=E$flags
  fi
  [[ $flags != *E* ]]
}

function idtsub/system:slurm/submit {
  local floags chdir ntask job_name script
  idtsub/system/submit.readargs "$@" || return "$?"
  (cd "$chdir"; sbatch -N 1 -n "$ntask" -p amd_256 -J "$job_name" "$script")
}
function idtsub/system:slurm/emitdef {
  echo 'start_thread() { srun -n 1 "$1"; }'
}

function idtsub/system:direct/submit {
  local floags chdir ntask job_name script
  idtsub/system/submit.readargs "$@" || return "$?"
  (cd "$chdir"; bash "$script" &> direct.out </dev/null) & disown
}
function idtsub/system:direct/emitdef {
  echo 'start_thread() { eval "$1"; }'
}

#-----------------------------------------------------------------------------

## @fn cmd:submit/make-jobdir
##   @var[out] jobdir
function cmd:submit/make-jobdir {
  jobdir=
  local jobdir_base=$idtsub_data_path/jobs
  [[ -d $jobdir_base ]] || mkdir -p "$jobdir_base"
  local date=$(date +%Y%m%d-%H%M%S)
  local index=0
  for ((index=0;index<100;index++)); do
    printf -v jobdir %s/%s-%02d "$jobdir_base" "$date" "$index"
    mkdir "$jobdir" 2>/dev/null && return 0
  done
  jobdir=
  echo "idtsub: failed to create job directory" >&2
  return 1
}

## @fn cmd:submit/save-binary src lnk
##   指定した名前の実行ファイルを PATH から探索して、
##   DATA_PATH/jobs/bin に hash 値と共にコピーします。
##   更に其処への相対パスでのシンボリックリンクを lnk に作成します。
##   lnk は DATA_PATH/jobs/XXX/bin/YYY の形式であると想定します。
function cmd:submit/save-binary {
  local src=$1 dst=$2
  local bin_path
  if ! bin_path=$(type -p "$src"); then
    "idtsub: failed to find the binary '$src'." >&2
    return 1
  fi

  if type -p sha256sum &>/dev/null; then
    bin_hash=$(sha256sum "$bin_path" | awk '{print $1}')
  elif type -p md5sum &>/dev/null; then
    bin_hash=$(md5sum "$bin_path" | awk '{print $1}')
  fi

  local cache=$idtsub_data_path/jobs/bin/${src##*/}.$bin_hash
  if [[ ! -f $cache ]]; then
    mkpd "$cache"
    cp -L "$bin_path" "$cache"
  fi
  mkpd "$dst"
  ln -s "../../bin/${cache##*/}" "$dst"
}

## @fn cmd:submit/readargs args...
##   @var[out] flags
##     c   copy executable
##     t   create IDTSUB_TMPDIR
##     r   set range
##     E   error
##   @var[out] command
##   @var[out] range_{rep,beg,end,cpu}
##   @var[out] job_name
##   @var[out] bin_names
##   @var[out] job_system
idtsub/readargs/define-flag-option   submit c:copy          c
idtsub/readargs/define-flag-option   submit t:create-tmpdir t
idtsub/readargs/define-array-option  submit C:copy-binary   bin_names
idtsub/readargs/define-scalar-option submit J:job-name      job_name
idtsub/readargs/define-scalar-option submit system          job_system
function idtsub/readargs:submit/option:r {
  idtsub/readargs/get-optarg && range=$optarg flags=r$flags
}
idtsub/readargs/define-longname submit r repeat
function idtsub/readargs:submit/process-argument {
  if [[ ! $command ]]; then
    command=$arg
  else
    idtsub/readargs/argerr "redundant argument '$arg'."
  fi
}
function cmd:submit/readargs {
  flags=
  command= job_name= job_system=$idtsub_system
  bin_names=()
  local range

  idtsub/readargs submit "$@"

  if [[ ! $command ]]; then
    echo "idtsub: command is not specified." >&2
    flags+=E
  fi

  # parse range
  range_rep=
  range_beg=0
  range_end=1
  range_cpu=1
  if [[ $range ]]; then
    local rex='([^=]+=)?([0-9]+:)?([0-9]+)(/[0-9]+)?'
    if ! [[ $range =~ $rex ]]; then
      echo "idtsub: invalid range spec '-r $range'." >&2
      flags+=E
    fi
    range_rep=${BASH_REMATCH[1]%=}
    range_beg=${BASH_REMATCH[2]%:}
    range_end=${BASH_REMATCH[3]}
    range_cpu=${BASH_REMATCH[4]#/}
    [[ $range_beg ]] || range_beg=0
    [[ $range_cpu ]] || range_cpu=1
  fi

  [[ $flags != *E* ]]
}

function cmd:submit {
  local q=\' Q="'\''"

  local flags command job_name bin_names job_system
  local range_{rep=,beg=0,end=1,cpu=1}
  cmd:submit/readargs "$@" || return 2

  local submit_hash
  printf -v submit_hash '#%04X' "$RANDOM"
  local date=$(date +"%F %T %Z")
  local ret; quote-words idtsub submit "$@"
  echo "[$date] $submit_hash $ret" >> "$idtsub_data_path"/submit.log
  echo "[$date] $submit_hash PWD='${PWD//$q/$Q}'" >> "$idtsub_data_path"/submit.log

  # Job name
  [[ $job_name ]] || job_name=$command

  local batch_size=$(((range_end-range_beg+range_cpu-1)/range_cpu))
  local ijob=$range_beg icpu=0
  for ((ijob=range_beg;ijob<range_end;ijob+=batch_size)); do
    local beg=$ijob end=$((ijob+batch_size))
    ((end>range_end)) && end=$range_end
    local count=$((end-beg))
    ((count>0)) || break

    local jobdir
    cmd:submit/make-jobdir || return 1

    # Copy executable
    local command1=$command
    if [[ $flags == *c* ]]; then
      local cmd=${command%%[$IFS]*}
      local fcmd=$jobdir/cmd.sh
      if [[ -x $cmd ]] && cp -L "$cmd" "$fcmd"; then
        command1=$fcmd${command:${#cmd}}
      else
        "idtsub: failed to copy the file '$cmd'." >&2
        return 1
      fi
    fi
    local bin_name ret
    for bin_name in "${bin_names[@]}"; do
      cmd:submit/save-binary "$bin_name" "$jobdir/bin/${bin_name##*/}" || return 1
    done

    local fjob=$jobdir/job.sh
    local flog=$jobdir/stat.log
    local fstat=$jobdir/stat.sh
    {
      echo '#!/usr/bin/env bash'
      echo "IDTSUB_JOBDIR='${jobdir//$q/$Q}'"
      echo "IDTSUB_COMMAND='${command1//$q/$Q}'"
      echo "IDTSUB_REPLACE='${range_rep//$q/$Q}'"
      echo "IDTSUB_PWD='${PWD//$q/$Q}'"
      echo "IDTSUB_HOME='${HOME//$q/$Q}'"
      tail -n +7 "$idtsub_data_path"/template/job.sh |
        sed "s/%%MIN%%/$beg/g;s/%%MAX%%/$((end-1))/g;s/%%COUNT%%/$count/g"
    } > "$fjob"

    local fsub=$jobdir/sub.sh
    {
      local _idtsub_tmpdir=
      [[ $flags == *t* ]] && _idtsub_tmpdir=$idtsub_tmpdir_base/${jobdir##*/}

      echo '#!/usr/bin/env bash'
      echo "IDTSUB_JOBDIR='${jobdir//$q/$Q}'"
      echo "IDTSUB_TMPDIR='${_idtsub_tmpdir//$q/$Q}'"
      idtsub/system:"$job_system"/emitdef
      tail -n +5 "$idtsub_data_path"/template/sub.sh
    } > "$fsub"

    chmod +x "$fjob" "$fsub"

    local date=$(date +"%F %T %Z")
    local job_range_suffix=
    local cmd_range_suffix=
    local log_range_suffix=
    if [[ $flags == *r* ]]; then
      log_range_suffix=" (range $beg:$end)"
      job_range_suffix="[$beg:$end]"
      cmd_range_suffix=" (${range_rep:+$range_rep=}$beg:$end)"
    fi
    echo "submit: $command$cmd_range_suffix"
    echo "[$date] $submit_hash JOB_ID ${jobdir##*/}$log_range_suffix" >> "$idtsub_data_path"/submit.log
    echo "[$date] IDTSUB submit" >> "$flog"
    {
      echo "command='${command//$q/$Q}$cmd_range_suffix'"
      echo "cwd='${PWD//$q/$Q}'"
      echo "stat=P"
    } >> "$fstat"
    if ! idtsub/system:"$job_system"/submit -D "$jobdir" -n 1 -J "$job_name$job_range_suffix" "$jobdir/sub.sh"; then
      echo "idtsub:${jobdir##*/}: failed to submit" >&2
      echo "[$(date +"%F %T %Z")] IDTSUB submit fail" >> "$flog"
      echo "stat=F" >> "$fstat"
      return 1
    fi
  done
}

## @fn cmd:stat/list
##   @var[in] flags
function cmd:stat/list {
  echo 'INDE JOB_ID             NODE       STAT   COMMAND'

  local jobdir index=0
  for jobdir in "$idtsub_data_path"/jobs/????????-??????-*; do
    ((index++))
    local job_id=${jobdir##*/}
    local stat=- fail=0 command=- cwd=- node=- time_start= time_end=

    if [[ -s $jobdir/stat.sh ]]; then
      source "$jobdir/stat.sh"
    elif [[ -s $jobdir/complete.mark ]]; then
      stat=C
    fi

    local sgr_stat=
    if ((fail)); then
      [[ $stat == C* ]] && stat=F$fail
      sgr_stat=$'\e[1;91m'
    else
      case $stat in
      (F*) sgr_stat=$'\e[1;91m' ;;
      (C*) [[ $stat == C ]] && stat=COMP
           sgr_stat=$'\e[94m' ;;
      (R*) sgr_stat=$'\e[1;92m' ;;
      (P*) [[ $stat == P ]] && stat=PEND
           sgr_stat=$'\e[32m' ;;
      esac
    fi
    [[ $flags != *a* && $stat == C* ]] && continue

    local time=-
    if [[ $time_start ]]; then
      [[ $time_end ]] || time_end=$(date +%s)
      local ret; idtsub/string#seconds-to-human $((time_end-time_start)); time=$ret
    fi

    printf '%04d %-18s %-10.10s %s%-6s%s %-6s %s\n' \
           "$index" "$job_id" "$node" \
           "$sgr_stat" "$stat" $'\e[m' \
           "$time" "$command"
  done
}

function idtsub/jobdir-eval {
  if [[ ! $1 || ${1//[0-9]} ]]; then
    echo "idtsub: invalid job_index '$1'." >&2
    return 1
  fi

  local index=$((10#$1)) command=$2
  local jobdir i=0
  for jobdir in "$idtsub_data_path"/jobs/????????-??????-*; do
    if ((++i==index)); then
      (cd "$jobdir"; eval -- "$command")
      return
    fi
  done
  echo "idtsub: job_index '$1' not found." >&2
  return 1
}

idtsub/readargs/define-flag-option stat a:all a
function idtsub/readargs:stat/process-argument {
  if [[ ! $id ]]; then
    if [[ ! $arg || ${arg//[0-9]} ]]; then
      echo "idtsub: invalid job id '$arg'." >&2
      flags=E$flags
    else
      id=$arg
    fi
  elif [[ ! $type ]]; then
    if [[ ! $arg ]]; then
      echo "idtsub: invalid argument ''." >&2
      flags=E$flags
    else
      type=$arg
    fi
  else
    idtsub/readargs/argerr "idtsub: redundant argument '$arg'"
    return 1
  fi
}
function cmd:stat {
  local flags= id= type=
  idtsub/readargs stat "$@" || return 2

  if [[ ! $id ]]; then
    cmd:stat/list
    return "$?"
  fi

  case $type in
  (''|log)
    idtsub/jobdir-eval "$id" 'cat stat.log' ;;
  (out|tail)
    local -a tail_options=()
    tail_options=()
    [[ $2 == out ]] && tail_options+=(-n +1)
    idtsub/jobdir-eval "$id" '
      [[ -s complete.mark ]] || tail_options+=(-f)
      tail "${tail_options[@]}" sub.out' ;;
  (stat.sh|sub.sh|job.sh|cmd.sh)
    idtsub/jobdir-eval "$id" 'cat '"$type" ;;
  (ls)
    idtsub/jobdir-eval "$id" 'ls -la' ;;
  (*)
    echo "idtsub/stat: unknown stat type '$type'" >&2
    return 2 ;;
  esac
}

function main {
  if (($#==0)) || [[ $1 == -* ]]; then
    cmd:stat "$@"
    return
  elif idtsub/is-function "cmd:$1"; then
    "cmd:$@"
    return
  elif local rex='^s[0-9]+$'; [[ $1 =~ $rex ]]; then
    cmd:stat "${1:1}" "${@:2}"
    return
  fi

  # case $1 in
  # (*)
  # esac

  echo "idtsub: unknown subcommand '$1'" >&2
  exit 2
}

main "$@"
