#!/usr/bin/env bash

shopt -s nullglob
quecon_prefix=~/.opt/idt
quecon_data_path=$quecon_prefix/share/quecon
quecon_tmpdir_base=${XDG_RUNTIME_DIR:-/dev/shm/$UID.$USER}
quecon_system=direct

rcfile=${XDG_CONFIG_HOME:-$HOME/.config}/quecon/init.bash
if [[ -e $rcfile ]]; then
  source "$rcfile"
fi

function quecon/is-function { declare -f "$1" &>/dev/null; }
function quecon/function#try { if quecon/is-function "$1"; then "$@"; else return 127; fi; }
function quecon/print { printf '%s\n' "${1-}"; }
function quecon/print-lines {
  if (($#)); then
    printf '%s\n' "$@"
  fi
}

function mkd { [[ -d $1 ]] || mkdir -p "$1"; }
function mkpd { [[ $1 == ?*/* ]] && mkd "${1%/*}"; }

function quecon/string#match { [[ $1 =~ $2 ]]; }
function quecon/string#seconds-to-human {
  local time=$1
  if ((time<3600)); then
    printf -v ret '%02dm%02ds' "$((time/60%60))" "$((time%60))"
  elif ((time<360000)); then
    printf -v ret '%02dh%02dm' "$((time/3600))" "$((time/60%60))"
  else
    printf -v ret '%02dd%02dh' "$((time/3600/24))" "$((time/3600%24))"
  fi
}
function quote-words {
  local word out= q=\' Q="'\''" specialchars=$IFS$'|&;()[]{}<>\\`$?*~!^#'$q\"
  for word; do
    if [[ $word == *$'\n'* ]]; then
      printf -v word %q "$word"
    elif [[ $word == *["$specialchars"]* ]]; then
      word=$q${word//$q/$Q}$q
    fi
    out=${out:+$out' '}$word
  done
  ret=$out
}

function quecon/readargs {
  local cmdname=$1; shift
  local opt= has_optarg= optarg=
  local iarg=0 args
  args=("$@")
  while ((iarg<$#)); do
    local arg=${args[iarg++]}
    if [[ $flags != - && $arg == -?* ]]; then
      case $arg in
      (--) flags=-$flags ;;
      (--*)
        opt=${arg:2} optarg= has_optarg=
        [[ $opt == *=* ]] &&
          has_optarg=1 optarg=${opt#*=} opt=${opt%%=*}
        quecon/function#try "quecon/readargs:$cmdname/option:$opt"
        (($?==127)) && quecon/readargs/argerr "unrecognized option '$arg'." ;;
      (-*)
        local ic=1
        while ((ic<${#arg})); do
          opt=${arg:ic:1}; ((ic++))
          optarg=${arg:ic} has_optarg=${optarg:+1}
          quecon/function#try "quecon/readargs:$cmdname/option:$opt"
          if (($?==127)); then
            quecon/readargs/argerr "unrecognized option '-$opt'."
            continue
          fi
          [[ $has_optarg == used ]] && break
        done ;;
      esac
    else
      quecon/function#try "quecon/readargs:$cmdname/process-argument"
      (($?==127)) && quecon/readargs/argerr "unrecognized argument '$arg'"
    fi
  done
  [[ $flags != *E* ]]
}
## @fn quecon/readargs/argerr message
##   @param[in] message
##   @var[in] cmdname iarg
##   @var[in,out] flags
function quecon/readargs/argerr {
  echo "quecon/$cmdname:\$$iarg: $1" >&2
  flags=E$flags
}
## @fn quecon/readargs/get-optarg opts
##   @var[in] cmdname iarg args opt has_optarg
##   @var[in,out] optarg flags
function quecon/readargs/get-optarg {
  local getoptarg_opts=$1
  if [[ $has_optarg ]]; then
    has_optarg=used
  else
    if ((iarg>=${#args[@]})); then
      local o=-$opt; ((${#opt}>1)) && o=-$o
      quecon/readargs/argerr "missing option argument for '$o'."
      return 1
    fi
    optarg=${args[iarg++]}
  fi

  if [[ :$getoptarg_opts: == *:unsigned:* ]]; then
    if [[ ! $optarg || ${optarg//[0-9]} ]]; then
       local o=-$opt; ((${#opt}>1)) && o=-$o
       quecon/readargs/argerr "unsigned integer is required as an optarg of '$o'."
       return 1
    fi
  fi
}

## @fn quecon/readargs/define-longname cmdname opt longname
function quecon/readargs/define-longname {
  local cmdname=$1 c=${2%%:*} longname=${2#*:}
  [[ $2 == *:* && $longname ]] &&
    eval "function quecon/readargs:$cmdname/option:$longname { quecon/readargs:submit/option:$c; }"
}

## @fn quecon/readargs/define-flag-option cmdname opt [longname]
function quecon/readargs/define-flag-option {
  local cmdname=$1 c=${2%%:*} flag=${3:-${2::1}}
  eval "function quecon/readargs:$cmdname/option:$c { flags=$flag\$flags; }"
  quecon/readargs/define-longname "$@"
}
## @fn quecon/readargs/define-string-option cmdname opt[:longname] var [opts]
function quecon/readargs/define-scalar-option {
  local cmdname=$1 c=${2%%:*} var=$3 opts=$4
  eval "function quecon/readargs:$cmdname/option:$c { quecon/readargs/get-optarg '$opts' && $var=\$optarg; }"
  quecon/readargs/define-longname "$@"
}
## @fn quecon/readargs/define-array-option cmdname opt[:longname] arr [opts]
function quecon/readargs/define-array-option {
  local cmdname=$1 c=${2%%:*} arr=$3 opts=$4
  eval "function quecon/readargs:$cmdname/option:$c { quecon/readargs/get-optarg '$opts' && $arr+=(\"\$optarg\"); }"
  quecon/readargs/define-longname "$@"
}

#-----------------------------------------------------------------------------

quecon/readargs/define-scalar-option system-submit D:chdir     chdir
quecon/readargs/define-scalar-option system-submit n:ntasks    ntask unsigned
quecon/readargs/define-scalar-option system-submit J:job-name  job_name
function quecon/readargs:system-submit/process-argument {
  if [[ $script ]]; then
    quecon/readargs/argerr "redundant argument '$arg'." >&2
    return 1
  fi
  if [[ ! $arg ]]; then
    quecon/readargs/argerr "invalid argument '$arg'." >&2
    return 1
  fi
  script=$arg
}

## @fn quecon/system/submit.readargs [-wnJ OPTARG] SCRIPT
##   @var[out] flags chdir ntask job_name script
function quecon/system/submit.readargs {
  flags= chdir=$PWD ntask=1 job_name=unnamed script=
  quecon/readargs system-submit "$@"
  if [[ ! $script ]]; then
    echo "quecon submit: script is not specified." >&2
    flags=E$flags
  fi
  [[ $flags != *E* ]]
}

function quecon/system:direct/submit {
  local flags chdir ntask job_name script
  quecon/system/submit.readargs "$@" || return "$?"
  (cd "$chdir"; bash "$script" &> direct.out </dev/null) & disown
  echo "system=direct:$!" >> "$fstat"
  return 0
}
function quecon/system:direct/emitdef {
  echo 'start_thread() { eval "$1"; }'
}
function quecon/system:direct/kill {
  local process_id=${1#*:}
  kill -9 -- -"$process_id"
}

function quecon/system:slurm/submit {
  local flags chdir ntask job_name script
  quecon/system/submit.readargs "$@" || return "$?"
  local queue=${slurm_partition:-${quecon_submit_queue:-amd_256}}
  local submit_stdout
  submit_stdout=$(cd "$chdir"; sbatch -N 1 -n "$ntask" -p "$queue" -J "$job_name" "$script"); local ext=$?
  if ((ext==0)); then
    local jobid=$(grep -Eo '[0-9]*' <<< $submit_stdout)
    [[ $jobid ]] && echo "system=slurm:$jobid" >> "$fstat"
  fi
  echo "$submit_stdout"
  return "$ext"
}
function quecon/system:slurm/emitdef {
  #echo 'start_thread() { srun -n 1 "$1"; }'
  echo 'start_thread() { eval "$1"; }'
}
function quecon/system:slurm/kill {
  local jobid=${1#*:}
  scancel "$jobid"
}

function quecon/system:pbs/emitdef {
  local flags chdir ntask job_name script
  quecon/system/submit.readargs "$@" || return "$?"

  local q=\' Q="'\''"
  if [[ ${job_name-} ]]; then
    job_name=${job_name//[[:space:][:cntrl:]]/-}
    quecon/print "#PBS -N $job_name"
  fi
  [[ ${quecon_submit_queue-} ]] &&
    quecon/print "#PBS -q $quecon_submit_queue"
  [[ ${quecon_submit_group-} ]] &&
    quecon/print "#PBS --group=$quecon_submit_group"
  quecon/print "#PBS -l cpunum_job=$ntask"
  [[ ${quecon_submit_timelimit-} ]] &&
    quecon/print "#PBS -l elapstim_req=$quecon_submit_timelimit"
  [[ ${quecon_submit_memlimit-} ]] &&
    quecon/print "#PBS -l memsz_job=$quecon_submit_memlimit"
  quecon/print "#PBS -e ${chdir:-.}/sub.e"
  quecon/print "#PBS -o ${chdir:-.}/sub.o"

  [[ ${quecon_submit_initcode-} ]] &&
    quecon/print "$quecon_submit_initcode"
  quecon/print 'cd "$PBS_O_WORKDIR"'
  echo 'start_thread() { eval "$1"; }'
}
function quecon/system:pbs/submit {
  local flags chdir ntask job_name script
  quecon/system/submit.readargs "$@" || return "$?"

  # Note: We go to the job directory so that stdout/stderr files saved by PBS
  # will be created in the job directory.  After starting the script in the job
  # directory, we move to the proper directory inside jobN.sh.
  local submit_stdout
  submit_stdout=$(cd "$chdir"; qsub "$script"); local ext=$?
  if ((ext==0)); then
    local jobid=
    if quecon/string#match "$submit_stdout" 'Request ([^[:space:]]+)'; then
      if [[ ${BASH_REMATCH[1]} == not ]]; then
        # Note: PBS outputs "Request not queued." with exit status 0 when
        # submitting the job fails.  When "not" is extracted as a job ID, we
        # manually set ext=1 to signal the submission failure.
        ext=1
      else
        jobid=${BASH_REMATCH[1]}
      fi
    elif quecon/string#match "$submit_stdout" '\b[0-9]+(\.[a-zA-Z0-9_]+)?\b'; then
      jobid=${BASH_REMATCH[0]}
    fi
    [[ $jobid ]] && echo "system=pbs:$jobid" >> "$fstat"
  fi
  echo "$submit_stdout"
  return "$ext"
}
function quecon/system:pbs/kill {
  if [[ $1 ]]; then
    local jobid=${1#*:}
    qdel "$jobid"
  fi
}

#-----------------------------------------------------------------------------
# job util

function quecon/jobdir-eval {
  if [[ ! $1 || ${1//[0-9]} ]]; then
    echo "quecon: invalid job_index '$1'." >&2
    return 1
  fi

  local index=$((10#$1)) command=$2
  local jobdir i=0
  for jobdir in "$quecon_data_path"/jobs/????????-??????-*; do
    [[ -d $jobdir ]] || continue
    if ((++i==index)); then
      (cd "$jobdir"; eval -- "$command")
      return
    fi
  done
  echo "quecon: job_index '$1' not found." >&2
  return 1
}

## @param[in] jobdir flags
## @var[out] line stat
function quecon/get-job-info {
  local jobdir=$1 flags=$2
  [[ -d $jobdir ]] || return 1
  line= stat=-
  ((index++))
  local job_id=${jobdir##*/}
  local fail=0 done=0 ntask=1
  local command=- cwd=- node=- time_start= time_end= system=

  local stat_sh
  for stat_sh in "$jobdir"/stat.sh "$jobdir"/stat?*.sh; do
    [[ -s $stat_sh ]] || continue
    source "$stat_sh"
  done
  [[ $stat == - && -s $jobdir/complete.mark ]] && stat=C

  local sgr_stat=
  if ((fail)); then
    [[ $stat == C* ]] && stat=F$fail
    [[ $stat == R ]] &&
      stat=R$done'!'$fail/$ntask
    sgr_stat=$'\e[1;91m'
  else
    case $stat in
    (K*) sgr_stat=$'\e[90m' ;;
    (F*) sgr_stat=$'\e[1;91m' ;;
    (C*) [[ $stat == C ]] && stat=COMP
         sgr_stat=$'\e[94m' ;;
    (R*) [[ $stat == R ]] &&
           stat=R$done/$ntask
         sgr_stat=$'\e[1;92m' ;;
    (P*) [[ $stat == P ]] && stat=PEND
         sgr_stat=$'\e[32m' ;;
    esac
  fi

  local time=-
  if [[ $time_start ]]; then
    [[ $time_end ]] || time_end=$(date +%s)
    local ret; quecon/string#seconds-to-human $((time_end-time_start)); time=$ret
  fi

  printf -v line \
         '%04d %-18s %-10.10s %s%-6s%s %-6s %s' \
         "$index" "$job_id" "$node" \
         "$sgr_stat" "$stat" $'\e[m' \
         "$time" "$command"
}

#-----------------------------------------------------------------------------
# submit

## @fn cmd:submit/make-jobdir
##   @var[out] jobdir
function cmd:submit/make-jobdir {
  jobdir=
  local jobdir_base=$quecon_data_path/jobs
  [[ -d $jobdir_base ]] || mkdir -p "$jobdir_base"
  local date=$(date +%Y%m%d-%H%M%S)
  local index=0
  for ((index=0;index<100;index++)); do
    printf -v jobdir %s/%s-%02d "$jobdir_base" "$date" "$index"
    mkdir "$jobdir" 2>/dev/null && return 0
  done
  jobdir=
  echo "quecon: failed to create job directory" >&2
  return 1
}

## @fn cmd:submit/save-binary src lnk
##   指定した名前の実行ファイルを PATH から探索して、
##   DATA_PATH/jobs/bin に hash 値と共にコピーします。
##   更に其処への相対パスでのシンボリックリンクを lnk に作成します。
##   lnk は DATA_PATH/jobs/XXX/bin/YYY の形式であると想定します。
function cmd:submit/save-binary {
  local src=$1 dst=$2
  local bin_path
  if ! bin_path=$(type -p "$src"); then
    "quecon: failed to find the binary '$src'." >&2
    return 1
  fi

  if type -p sha256sum &>/dev/null; then
    bin_hash=$(sha256sum "$bin_path" | awk '{print $1}')
  elif type -p md5sum &>/dev/null; then
    bin_hash=$(md5sum "$bin_path" | awk '{print $1}')
  fi

  local cache=$quecon_data_path/jobs/bin/${src##*/}.$bin_hash
  if [[ ! -f $cache ]]; then
    mkpd "$cache"
    cp -L "$bin_path" "$cache"
  fi
  mkpd "$dst"
  ln -s "../../bin/${cache##*/}" "$dst"
}

## @fn cmd:submit/readargs args...
##   @var[out] flags
##     c   copy executable
##     t   create QUECON_TMPDIR
##     r   set range
##     E   error
##   @var[out] command
##   @var[out] range_{rep,beg,end,cpu}
##   @var[out] job_name
##   @var[out] bin_names
##   @var[out] job_system
quecon/readargs/define-flag-option   submit c:copy          c
quecon/readargs/define-flag-option   submit t:create-tmpdir t
quecon/readargs/define-array-option  submit C:copy-binary   bin_names
quecon/readargs/define-scalar-option submit J:job-name      job_name
quecon/readargs/define-scalar-option submit system          job_system
function quecon/readargs:submit/option:r {
  quecon/readargs/get-optarg && range=$optarg flags=r$flags
}
quecon/readargs/define-longname submit r repeat
function quecon/readargs:submit/process-argument {
  if [[ ! $command ]]; then
    command=$arg
  else
    quecon/readargs/argerr "redundant argument '$arg'."
  fi
}
function cmd:submit/readargs {
  flags=
  command= job_name= job_system=$quecon_system
  bin_names=()
  local range

  quecon/readargs submit "$@"

  if [[ ! $command ]]; then
    echo "quecon: command is not specified." >&2
    flags+=E
  fi

  # parse range
  range_rep=
  range_beg=0
  range_end=1
  range_node=1
  range_core=1
  if [[ $range ]]; then
    local rex='([^=]+=)?([0-9]+:)?([0-9]+)(/[0-9]+(x[0-9]+)?)?'
    if ! [[ $range =~ $rex ]]; then
      echo "quecon: invalid range spec '-r $range'." >&2
      flags+=E
    fi
    range_rep=${BASH_REMATCH[1]%=}
    range_beg=${BASH_REMATCH[2]%:}
    range_end=${BASH_REMATCH[3]}
    range_node=${BASH_REMATCH[4]#/}
    range_node=${range_node%%x*}
    range_core=${BASH_REMATCH[5]#x}
    [[ $range_beg ]] || range_beg=0
    [[ $range_node ]] || range_node=1
    [[ $range_core ]] || range_core=1
  fi

  [[ $flags != *E* ]]
}

function cmd:submit {
  local q=\' Q="'\''"

  local flags command job_name bin_names job_system
  local range_{rep=,beg=0,end=1,node=1,core=1}
  cmd:submit/readargs "$@" || return 2

  local submit_hash
  printf -v submit_hash '#%04X' "$RANDOM"
  local date=$(date +"%F %T %Z")
  local ret; quote-words quecon submit "$@"
  echo "[$date] $submit_hash $ret" >> "$quecon_data_path"/submit.log
  echo "[$date] $submit_hash PWD='${PWD//$q/$Q}'" >> "$quecon_data_path"/submit.log

  # Job name
  [[ $job_name ]] || job_name=$command

  local inode
  for ((inode=0;inode<range_node;inode++)); do
    local node_beg=$((range_beg+inode))
    local node_end=$range_end
    local node_step=$range_node
    local node_ntask=$(((node_end-node_beg+node_step-1)/node_step))
    ((node_ntask>0)) || break

    local jobdir
    cmd:submit/make-jobdir || return 1

    # Copy executable
    local command1=$command
    if [[ $flags == *c* ]]; then
      local cmd=${command%%[$IFS]*}
      local fcmd=$jobdir/cmd.sh
      if [[ -x $cmd ]] && cp -L "$cmd" "$fcmd"; then
        command1=$fcmd${command:${#cmd}}
      else
        "quecon: failed to copy the file '$cmd'." >&2
        return 1
      fi
    fi
    local bin_name ret
    for bin_name in "${bin_names[@]}"; do
      cmd:submit/save-binary "$bin_name" "$jobdir/bin/${bin_name##*/}" || return 1
    done

    # repeat の説明
    local job_range_suffix=
    local cmd_range_suffix=
    local log_range_suffix=
    if [[ $flags == *r* ]]; then
      local repeat_text
      if ((node_ntask==1)); then
        repeat_text=$node_beg
      elif ((node_step==1)); then
        local node_max=$((node_beg+(node_ntask-1)))
        repeat_text={$node_beg..$node_max}
      else
        local node_max=$((node_beg+(node_ntask-1)*node_step))
        repeat_text={$node_beg..$node_max..$node_step}
      fi
      log_range_suffix=" repeat=$repeat_text"
      job_range_suffix="$repeat_text"
      cmd_range_suffix=" (${range_rep:+$range_rep=}$repeat_text)"
    fi
    local job_title=$job_name${job_range_suffix:+/$job_range_suffix}

    local fsub=$jobdir/sub.sh
    local flog=$jobdir/stat.log
    local fstat=$jobdir/stat.sh
    {
      local _quecon_tmpdir=
      [[ $flags == *t* ]] && _quecon_tmpdir=$quecon_tmpdir_base/${jobdir##*/}

      echo '#!/usr/bin/env bash'
      quecon/system:"$job_system"/emitdef -D "$jobdir" -n "$range_core" -J "$job_title" "$fsub"
      echo "QUECON_JOBDIR='${jobdir//$q/$Q}'"
      echo "QUECON_TMPDIR='${_quecon_tmpdir//$q/$Q}'"
      tail -n +5 "$quecon_data_path"/template/sub.sh
    } > "$fsub"

    local icore
    for ((icore=0;icore<range_core;icore++)); do
      local core_beg=$((node_beg+icore*node_step))
      local core_end=$range_end
      local core_step=$((range_node*range_core))
      ((core_beg<core_end)) || break
      
      local fjob=$jobdir/job$icore.sh
      {
        echo '#!/usr/bin/env bash'
        echo "QUECON_JOBDIR='${jobdir//$q/$Q}'"
        echo "QUECON_COMMAND='${command1//$q/$Q}'"
        echo "QUECON_REPNODE='${icore//$q/$Q}'"
        echo "QUECON_REPBEG='${core_beg//$q/$Q}'"
        echo "QUECON_REPEND='${core_end//$q/$Q}'"
        echo "QUECON_REPSTEP='${core_step//$q/$Q}'"
        echo "QUECON_REPLACE='${range_rep//$q/$Q}'"
        echo "QUECON_PWD='${PWD//$q/$Q}'"
        echo "QUECON_HOME='${HOME//$q/$Q}'"
        tail -n +11 "$quecon_data_path"/template/job.sh
      } > "$fjob"
    done

    chmod +x "$jobdir"/*.sh

    local date=$(date +"%F %T %Z")
    echo "submit: $command$cmd_range_suffix"
    echo "[$date] $submit_hash JOB_ID ${jobdir##*/}$log_range_suffix" >> "$quecon_data_path"/submit.log
    echo "[$date] QUECON submit" >> "$flog"
    {
      echo "command='${command//$q/$Q}$cmd_range_suffix'"
      echo "cwd='${PWD//$q/$Q}'"
      echo "ntask=$node_ntask"
      echo "stat=P"
    } >> "$fstat"
    if ! quecon/system:"$job_system"/submit -D "$jobdir" -n "$range_core" -J "$job_title" "$fsub"; then
      echo "quecon:${jobdir##*/}: failed to submit" >&2
      echo "[$(date +"%F %T %Z")] QUECON submit fail" >> "$flog"
      echo "stat=F" >> "$fstat"
      return 1
    fi
  done
}

quecon/readargs/define-flag-option stat a:all   a
quecon/readargs/define-flag-option stat help    H
quecon/readargs/define-flag-option stat version V
function quecon/readargs:stat/process-argument {
  if [[ ! $id ]]; then
    if [[ ! $arg || ${arg//[0-9]} ]]; then
      echo "quecon: invalid job id '$arg'." >&2
      flags=E$flags
    else
      id=$arg
    fi
  elif [[ ! $type ]]; then
    if [[ ! $arg ]]; then
      echo "quecon: invalid argument ''." >&2
      flags=E$flags
    else
      type=$arg
    fi
  else
    quecon/readargs/argerr "quecon: redundant argument '$arg'"
    return 1
  fi
}

## @fn cmd:stat/list
##   @var[in] flags
function cmd:stat/list {
  echo 'INDE JOB_ID             NODE       STAT   COMMAND'

  local jobdir index=0
  for jobdir in "$quecon_data_path"/jobs/????????-??????-*; do
    local line stat
    quecon/get-job-info "$jobdir" || continue
    [[ $flags != *a* && $stat == [CK]* ]] && continue
    printf '%s\n' "$line"
  done
}

function cmd:stat/print-version {
  printf 'quecon (idt) 1.0.0\n'
}
function cmd:stat/print-help {
  printf '%s\n' \
         'usage: quecon [stat] [-a|--help|--version]' \
         'Show list of jobs' \
         '  --version     Show version and exit' \
         '  --help        Show help and exit' \
         '  -a, --all     Show all jobs' \
         '' \
         'usage: quecon [stat] NUM [TYPE]' \
         'Show details of the specified job.' \
         '  NUM           Select job by the job index' \
         '  TYPE          One of the following values [default: log]:' \
         '    log         Dump log' \
         '    out         Dump stdout/stderr.' \
         '    tail        Show tail of stdout/stderr.' \
         '    ls          Show files in the quecon job directory.' \
         '    sub.sh      Show the file content.' \
         '    cmd.sh      Show the file content.' \
         '    job*.sh     Show the file content.' \
         '    stat*.sh    Show the file content.' \
         '' \
         'usage: quecon submit [-ct|-C BIN|-r REPEAT|--system SYSTEM] COMMAND' \
         'Submit jobs.' \
         '  --system=SYS  Select job scheduler. SYS = "direct", or "slurm"' \
         '  -c, --copy    Copy the script file.' \
         '  -C, --copy-binary=BIN' \
         '                Copy the binary found in PATH.' \
         '  -t, --create-tmpdir' \
         '                Create temporary directory for the job and assigns the path to' \
         '                the environment QUECON_TMPDIR.' \
         '  -r, --repeat=[REP=][BEGIN:]END[/NNODE[xNCORE]]' \
         '                Repeat the command with an integer argument.' \
         '    REP         The pattern for command substrings to be replaced by the index.' \
         '    BEGIN       Starting index of repeat.' \
         '    END         Ending index of repeat. Exclusive.' \
         '    NNODE       Number of job submissions used for repeating.' \
         '    NCORE       Number of commands parally executed in a job.' \
         '  quecon_submit_queue=CLASS' \
         '  slurm_partition=PARTITION (deprecated)' \
         '                Specify the queue/job-class/partition of the job scheduler.  In' \
         '                the case of Slurm, this corresponds to the partition specified' \
         '                by "-p".  In the case of PBS, this corresponds to the queue' \
         '                specified by "-q".' \
         '  quecon_submit_group=GROUP' \
         '                Specify the group.  In the case of PBS, this corresponds to' \
         '                the group specified by "--group=".' \
         '  quecon_submit_timelimit=TIME' \
         '                Specify the time limit.  In the case of PBS, this corresponds' \
         '                to the time limit in the form "HH:MM:SS" specified by "-l' \
         '                elapstim_req=".' \
         '  quecon_submit_memlimit=TIME' \
         '                Specify the memory limit.  In the case of PBS, this corresponds' \
         '                to the memory limit in the form e.g. "<num>GB" specified by "-l' \
         '                memsz_job=".' \
         ''
}
function cmd:stat {
  local flags= id= type=
  quecon/readargs stat "$@" || return 2

  [[ $flags == *V* ]] &&
    cmd:stat/print-version
  [[ $flags == *H* ]] &&
    cmd:stat/print-help
  [[ $flags == *[HV]* ]] && return 0

  if [[ ! $id ]]; then
    cmd:stat/list
    return "$?"
  fi

  case $type in
  (''|log)
    quecon/jobdir-eval "$id" 'cat stat.log' ;;
  (out|tail)
    local -a tail_options=()
    tail_options=()
    if [[ $2 == out ]]; then
      tail_options+=(-n +1)
    else
      tail_options+=(-n 10)
    fi
    quecon/jobdir-eval "$id" '
      [[ ! -s complete.mark && -t 1 ]] && tail_options+=(-f)
      tail "${tail_options[@]}" sub.out' ;;
  (stat*.sh|sub.sh|job*.sh|cmd.sh)
    quecon/jobdir-eval "$id" 'cat '"$type" ;;
  (ls)
    quecon/jobdir-eval "$id" 'ls -la' ;;
  (*)
    echo "quecon/stat: unknown stat type '$type'" >&2
    return 2 ;;
  esac
}

function cmd:archive {
  # determine date
  local jdir=$quecon_data_path/jobs
  local date=$(date +'%Y%m%d') index=0
  while [[ -s $jdir/$date.stat ]]; do
    date=${date%-*}-$((++index))
  done

  local archive=$jdir/$date-archive.tar.xz
  local tmpdir=$jdir/$date-archive
  local statfile=$jdir/$date.stat
  mkd "$tmpdir"

  local jobdir index=0
  for jobdir in "$jdir"/2???????-??????-??; do
    local line stat
    quecon/get-job-info "$jobdir" || continue
    [[ $stat == [CFK]* ]] || continue
    printf '%s\n' "$line" >> "$statfile"
    mv "$jobdir" "$tmpdir"
  done
  if [[ -s $statfile ]]; then
    (cd "$jdir"; tar cavf "${archive##*/}" "${tmpdir##*/}") &&
      mkd "$jdir/gomi" &&
      mv "$tmpdir" "$jdir/gomi/"
  else
    rmdir "$tmpdir"
  fi
}

function cmd:kill/proc {
  [[ -s stat.sh ]] || return 1
  local command=- cwd=- node=- time_start= time_end= system=
  source stat.sh
  [[ $stat == - && -s $jobdir/complete.mark ]] && stat=C

  # already completed
  [[ $stat == C || $stat == F ]] && return 1

  if [[ ! $system ]]; then
    echo "${PWD##*/}: failed to kill the job with an unknown type." >&2
    return 1
  fi

  local job_system=${system%%:*}
  if quecon/system:"$job_system"/kill "${system}"; then
    {
      echo "stat=K"
      date +'time_end=%s'
    } >> stat.sh
    return 0
  else
    echo "quecon ($job_system): failed to kill JOB ${PWD##*/}" >&2
    return 1
  fi
}
function cmd:kill {
  quecon/jobdir-eval "$1" 'cmd:kill/proc'
}

#------------------------------------------------------------------------------

function main {
  if (($#==0)) || [[ $1 == -* ]]; then
    cmd:stat "$@"
    return
  elif quecon/is-function "cmd:$1"; then
    "cmd:$@"
    return
  elif local rex='^[0-9]+$'; [[ $1 =~ $rex ]]; then
    cmd:stat "$1" "${@:2}"
    return
  fi

  # case $1 in
  # (*)
  # esac

  echo "quecon: unknown subcommand '$1'" >&2
  exit 2
}

main "$@"
